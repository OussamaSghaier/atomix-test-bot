syntax = "proto3";

package atomix.map.service;

import "atomix/primitive/service.proto";

option java_package = "io.atomix.core.map.impl";
option java_outer_classname = "AtomicMapProto";
option java_multiple_files = true;

// Atomic map snapshot
message AtomicMapSnapshot {
    repeated string prepared_keys = 1;
    map<string, AtomicMapEntryValue> entries = 2;
    map<string, AtomicMapTransaction> transactions = 3;
    int64 version = 4;
}

// Atomic map entry value
message AtomicMapEntryValue {
    Type type = 1;
    int64 version = 2;
    bytes value = 3;
    int64 created = 4;
    int64 ttl = 5;

    enum Type {
        VALUE = 0;
        TOMBSTONE = 1;
    }
}

// Atomic map transaction
message AtomicMapTransaction {
    int64 version = 1;
    repeated AtomicMapUpdate updates = 2;
}

// Transaction update
message AtomicMapUpdate {
    Type type = 1;
    string key = 2;
    bytes value = 3;
    int64 version = 4;

    enum Type {
        LOCK = 0;
        VERSION_MATCH = 1;
        PUT_IF_VERSION_MATCH = 2;
        REMOVE_IF_VERSION_MATCH = 3;
        PUT_IF_ABSENT = 4;
    }
}

message ContainsKeyRequest {
    repeated string keys = 1;
}

message ContainsKeyResponse {
    bool contains_key = 1;
}

message SizeRequest {

}

message SizeResponse {
    int32 size = 1;
}

message KeysRequest {

}

message KeysResponse {
    string key = 1;
}

message EntriesRequest {

}

message EntriesResponse {
    string key = 1;
    bytes value = 2;
    int64 version = 3;
}

message PutRequest {
    string key = 1;
    bytes value = 2;
    int64 version = 3;
    int64 ttl = 4;
}

message PutResponse {
    UpdateStatus status = 1;
    bytes previous_value = 2;
    int64 previous_version = 3;
    int64 new_version = 4;
}

message ReplaceRequest {
    string key = 1;
    bytes previous_value = 2;
    int64 previous_version = 3;
    bytes new_value = 4;
    int64 ttl = 5;
}

message ReplaceResponse {
    UpdateStatus status = 1;
    bytes previous_value = 2;
    int64 previous_version = 3;
    int64 new_version = 4;
}

message GetRequest {
    string key = 1;
}

message GetResponse {
    bytes value = 1;
    int64 version = 2;
}

message RemoveRequest {
    string key = 1;
    bytes value = 2;
    int64 version = 3;
}

message RemoveResponse {
    UpdateStatus status = 1;
    bytes previous_value = 2;
    int64 previous_version = 3;
}

message ClearRequest {
}

message ClearResponse {
}

message ListenRequest {

}

message ListenResponse {
    Type type = 1;
    string key = 2;
    bytes old_value = 3;
    int64 old_version = 4;
    bytes new_value = 5;
    int64 new_version = 6;

    enum Type {
        INSERTED = 0;
        UPDATED = 1;
        REMOVED = 2;
    }
}

message UnlistenRequest {
    int64 stream_id = 1;
}

message UnlistenResponse {
}

enum UpdateStatus {
    OK = 0;
    NOOP = 1;
    WRITE_LOCK = 2;
    PRECONDITION_FAILED = 3;
}

message PrepareRequest {
    string transaction_id = 1;
    AtomicMapTransaction transaction = 2;
}

message PrepareResponse {
    Status status = 1;

    enum Status {
        OK = 0;
        PARTIAL_FAILURE = 1;
        CONCURRENT_TRANSACTION = 2;
        OPTIMISTIC_LOCK_FAILURE = 3;
    }
}

message CommitRequest {
    string transaction_id = 1;
}

message CommitResponse {
    Status status = 1;

    enum Status {
        OK = 0;
        UNKNOWN_TRANSACTION_ID = 1;
        FAILURE_TO_PREPARE = 2;
        FAILURE_DURING_COMMIT = 3;
    }
}

message RollbackRequest {
    string transaction_id = 1;
}

message RollbackResponse {
    Status status = 1;

    enum Status {
        OK = 0;
        UNKNOWN_TRANSACTION_ID = 1;
    }
}

// Map service
service MapService {
    rpc Size(SizeRequest) returns (SizeResponse) {
        option (atomix.primitive.service.operation) = {
            name: "size"
            type: QUERY
        };
    }
    rpc Keys(KeysRequest) returns (stream KeysResponse) {
        option (atomix.primitive.service.operation) = {
            name: "keys"
            type: QUERY
        };
    }
    rpc Entries(EntriesRequest) returns (stream EntriesResponse) {
        option (atomix.primitive.service.operation) = {
            name: "entries"
            type: QUERY
        };
    }
    rpc ContainsKey(ContainsKeyRequest) returns (ContainsKeyResponse) {
        option (atomix.primitive.service.operation) = {
            name: "containsKey"
            type: QUERY
        };
    }
    rpc Put(PutRequest) returns (PutResponse) {
        option (atomix.primitive.service.operation) = {
            name: "put"
            type: COMMAND
        };
    }
    rpc Replace(ReplaceRequest) returns (ReplaceResponse) {
        option (atomix.primitive.service.operation) = {
            name: "replace"
            type: COMMAND
        };
    }
    rpc Get(GetRequest) returns (GetResponse) {
        option (atomix.primitive.service.operation) = {
            name: "get"
            type: QUERY
        };
    }
    rpc Remove(RemoveRequest) returns (RemoveResponse) {
        option (atomix.primitive.service.operation) = {
            name: "remove"
            type: COMMAND
        };
    }
    rpc Clear(ClearRequest) returns (ClearResponse) {
        option (atomix.primitive.service.operation) = {
            name: "clear"
            type: COMMAND
        };
    }
    rpc Listen(ListenRequest) returns (stream ListenResponse) {
        option (atomix.primitive.service.operation) = {
            name: "listen"
            type: COMMAND
        };
    }
    rpc Unlisten(UnlistenRequest) returns (UnlistenResponse) {
        option (atomix.primitive.service.operation) = {
            name: "unlisten"
            type: COMMAND
        };
    }
    rpc Prepare(PrepareRequest) returns (PrepareResponse) {
        option (atomix.primitive.service.operation) = {
            name: "prepare"
            type: COMMAND
        };
    }
    rpc PrepareAndCommit(PrepareRequest) returns (PrepareResponse) {
        option (atomix.primitive.service.operation) = {
            name: "prepareAndCommit"
            type: COMMAND
        };
    }
    rpc Commit(CommitRequest) returns (CommitResponse) {
        option (atomix.primitive.service.operation) = {
            name: "commit"
            type: COMMAND
        };
    }
    rpc Rollback(RollbackRequest) returns (RollbackResponse) {
        option (atomix.primitive.service.operation) = {
            name: "rollback"
            type: COMMAND
        };
    }
}
